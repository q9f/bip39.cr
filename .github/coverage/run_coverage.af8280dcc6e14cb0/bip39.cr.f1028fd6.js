var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2021-23 Afri Schoedon @q9f"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"require \"big\""},
{"lineNum":"   16","line":"require \"random\""},
{"lineNum":"   17","line":"require \"openssl\""},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"require \"./util\""},
{"lineNum":"   20","line":"require \"./version\""},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"# Implements 128/160/192/224/256-bit `BIP-0039` Mnemonics."},
{"lineNum":"   23","line":"# Ref: [bitcoin/bips/bip-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)"},
{"lineNum":"   24","line":"module Bip0039"},
{"lineNum":"   25","line":"  # Implements a `Bip0039` Mnemonic class."},
{"lineNum":"   26","line":"  # Ref: [bitcoin/bips/bip-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)"},
{"lineNum":"   27","line":"  class Mnemonic"},
{"lineNum":"   28","line":"    # The bit-size of the entropy of the mnemonic."},
{"lineNum":"   29","line":"    property ent : Int32"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    # The random seed of the mnemonic."},
{"lineNum":"   32","line":"    property seed : BigInt"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    # Implements a `Bip0039` Mnemonic with a default 128-bit entropy."},
{"lineNum":"   35","line":"    #"},
{"lineNum":"   36","line":"    # ```"},
{"lineNum":"   37","line":"    # mnemonic = Bip0039::Mnemonic.new"},
{"lineNum":"   38","line":"    # # => #<Bip0039::Mnemonic:0x7f8be5611d80>"},
{"lineNum":"   39","line":"    # ```"},
{"lineNum":"   40","line":"    def initialize"},
{"lineNum":"   41","line":"      @ent = 128"},
{"lineNum":"   42","line":"      @seed = generate_random_seed(@seed)"},
{"lineNum":"   43","line":"    end"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    # Implements a `Bip0039` Mnemonic with a random entropy of ENT bits."},
{"lineNum":"   46","line":"    #"},
{"lineNum":"   47","line":"    # Parameters:"},
{"lineNum":"   48","line":"    # * `ent` (`Int32`): the bit-size of the random entropy to use (128/160/192/224/256)."},
{"lineNum":"   49","line":"    #"},
{"lineNum":"   50","line":"    # ```"},
{"lineNum":"   51","line":"    # mnemonic = Bip0039::Mnemonic.new 256"},
{"lineNum":"   52","line":"    # # => #<Bip0039::Mnemonic:0x7f8be5611d80>"},
{"lineNum":"   53","line":"    # ```"},
{"lineNum":"   54","line":"    def initialize(ent : Int32 = 128)","class":"lineCov","hits":"7","order":"1","possible_hits":"7",},
{"lineNum":"   55","line":"      if ent % 32 != 0 || ent < 128 || ent > 256","class":"linePartCov","hits":"3","order":"2","possible_hits":"4",},
{"lineNum":"   56","line":"        raise \"Can only generate seeds of 128/160/192/224/256-bit entropy\"","class":"linePartCov","hits":"1","order":"3","possible_hits":"2",},
{"lineNum":"   57","line":"      end"},
{"lineNum":"   58","line":"      @ent = ent","class":"lineCov","hits":"2","order":"43","possible_hits":"2",},
{"lineNum":"   59","line":"      @seed = generate_random_seed(ent)","class":"lineCov","hits":"2","order":"44","possible_hits":"2",},
{"lineNum":"   60","line":"    end"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    # Implements a `Bip0039` Mnemonic restored from a hexadecimal seed."},
{"lineNum":"   63","line":"    #"},
{"lineNum":"   64","line":"    # Parameters:"},
{"lineNum":"   65","line":"    # * `hex` (`String`): the hex-seed to use to generate the mnemonic from."},
{"lineNum":"   66","line":"    #"},
{"lineNum":"   67","line":"    # ```"},
{"lineNum":"   68","line":"    # mnemonic = Bip0039::Mnemonic.new \"9e885d952ad362caebefe34e91bd2\""},
{"lineNum":"   69","line":"    # # => #<Bip0039::Mnemonic:0x7f8be5611d80>"},
{"lineNum":"   70","line":"    # ```"},
{"lineNum":"   71","line":"    def initialize(hex : String)","class":"lineCov","hits":"3","order":"4","possible_hits":"3",},
{"lineNum":"   72","line":"      if hex.size % 8 != 0 || hex.size < 32 || hex.size > 64","class":"lineCov","hits":"2","order":"5","possible_hits":"2",},
{"lineNum":"   73","line":"        raise \"Can only parse 128/160/192/224/256-bit hex seeds\"","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"   74","line":"      end"},
{"lineNum":"   75","line":"      @ent = hex.size * 4","class":"linePartCov","hits":"1","order":"71","possible_hits":"2",},
{"lineNum":"   76","line":"      @seed = BigInt.new hex, 16","class":"lineCov","hits":"1","order":"72","possible_hits":"1",},
{"lineNum":"   77","line":"    end"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    # Implements a `Bip0039` Mnemonic restored from a numeric seed of given size."},
{"lineNum":"   80","line":"    #"},
{"lineNum":"   81","line":"    # Parameters:"},
{"lineNum":"   82","line":"    # * `seed` (`BigInt`): the numeric seed to use to generate the mnemonic from."},
{"lineNum":"   83","line":"    # * `ent` (`Int32`): the bit-size of the random entropy to use (128/160/192/224/256)."},
{"lineNum":"   84","line":"    #"},
{"lineNum":"   85","line":"    # ```"},
{"lineNum":"   86","line":"    # mnemonic = Bip0039::Mnemonic.new BigInt.new(\"9e885d952ad362caebefe34e91bd2\", 16), 128"},
{"lineNum":"   87","line":"    # # => #<Bip0039::Mnemonic:0x7f8be5611d80>"},
{"lineNum":"   88","line":"    # ```"},
{"lineNum":"   89","line":"    def initialize(seed : BigInt, ent : Int32 = 128)","class":"lineCov","hits":"4","order":"7","possible_hits":"4",},
{"lineNum":"   90","line":"      if ent % 32 != 0 || ent < 128 || ent > 256","class":"lineCov","hits":"2","order":"8","possible_hits":"2",},
{"lineNum":"   91","line":"        raise \"Can only recover seeds of 128/160/192/224/256-bit entropy\"","class":"lineCov","hits":"1","order":"9","possible_hits":"1",},
{"lineNum":"   92","line":"      end"},
{"lineNum":"   93","line":"      @ent = ent","class":"lineCov","hits":"1","order":"49","possible_hits":"1",},
{"lineNum":"   94","line":"      @seed = seed","class":"lineCov","hits":"1","order":"50","possible_hits":"1",},
{"lineNum":"   95","line":"    end"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    # Implements a `Bip0039` Mnemonic restored from a seed phrase."},
{"lineNum":"   98","line":"    #"},
{"lineNum":"   99","line":"    # Parameters:"},
{"lineNum":"  100","line":"    # * `phrase` (`Array(String)`): the seed phrase to recover the mnemonic from (12/15/18/21/24 words)."},
{"lineNum":"  101","line":"    #"},
{"lineNum":"  102","line":"    # ```"},
{"lineNum":"  103","line":"    # mnemonic = Bip0039::Mnemonic.new [\"ozone\", \"drill\", \"grab\", \"fiber\", \"curtain\", \"grace\", \"pudding\", \"thank\", \"cruise\", \"elder\", \"eight\", \"picnic\"]"},
{"lineNum":"  104","line":"    # # => #<Bip0039::Mnemonic:0x7f8be5611d80>"},
{"lineNum":"  105","line":"    # ```"},
{"lineNum":"  106","line":"    def initialize(phrase : Array(String))","class":"lineCov","hits":"3","order":"10","possible_hits":"3",},
{"lineNum":"  107","line":"      raise \"Invalid seed phrase: wrong size\" if phrase.size < 12 || phrase.size > 24 || phrase.size % 3 != 0","class":"lineCov","hits":"2","order":"11","possible_hits":"2",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"      # Load the english dictionary for BIP-0039."},
{"lineNum":"  110","line":"      dictionary = Util.word_list","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"      # Get indices for each of the words and compute a checksummed seed."},
{"lineNum":"  113","line":"      checksummed_seed = \"\"","class":"lineCov","hits":"1","order":"18","possible_hits":"1",},
{"lineNum":"  114","line":"      phrase.each do |word|"},
{"lineNum":"  115","line":"        index = dictionary.index(word)","class":"lineCov","hits":"1","order":"19","possible_hits":"1",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        # Ensure every word is part of our dictionary."},
{"lineNum":"  118","line":"        raise \"Invalid seed phrase: word not in dictionary\" if index.nil?","class":"lineCov","hits":"2","order":"20","possible_hits":"2",},
{"lineNum":"  119","line":"        checksummed_seed += Util.num_to_padded_bin index, 11","class":"lineCov","hits":"1","order":"21","possible_hits":"1",},
{"lineNum":"  120","line":"      end"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"      # Retrieve seed and checksum."},
{"lineNum":"  123","line":"      seed_length = (checksummed_seed.size * 32 / 33).to_i","class":"linePartCov","hits":"1","order":"25","possible_hits":"2",},
{"lineNum":"  124","line":"      checksum_length = checksummed_seed.size - seed_length","class":"lineCov","hits":"1","order":"26","possible_hits":"1",},
{"lineNum":"  125","line":"      seed = checksummed_seed[0, seed_length]","class":"lineCov","hits":"1","order":"27","possible_hits":"1",},
{"lineNum":"  126","line":"      checksum = checksummed_seed[seed_length, checksum_length]","class":"lineCov","hits":"1","order":"28","possible_hits":"1",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"      # Not every phrase is valid, therefore we verify the checksum bits."},
{"lineNum":"  129","line":"      raise \"Invalid seed phrase: checksum mismatch\" if checksum != checksum Util.bin_to_padded_hex seed, seed.size","class":"lineCov","hits":"1","order":"29","possible_hits":"1",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"      # Store the seed."},
{"lineNum":"  132","line":"      @ent = seed.size","class":"lineCov","hits":"1","order":"69","possible_hits":"1",},
{"lineNum":"  133","line":"      @seed = BigInt.new seed, 2","class":"lineCov","hits":"1","order":"70","possible_hits":"1",},
{"lineNum":"  134","line":"    end"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    # Generates a phrase of words according to the `Bip0039` specification"},
{"lineNum":"  137","line":"    # based on the used seed."},
{"lineNum":"  138","line":"    #"},
{"lineNum":"  139","line":"    # ```"},
{"lineNum":"  140","line":"    # Bip0039::Mnemonic.new.to_words"},
{"lineNum":"  141","line":"    # # => [\"ozone\", \"drill\", \"grab\", \"fiber\", \"curtain\", \"grace\", \"pudding\", \"thank\", \"cruise\", \"elder\", \"eight\", \"picnic\"]"},
{"lineNum":"  142","line":"    # ```"},
{"lineNum":"  143","line":"    def to_words : Array(String)","class":"lineCov","hits":"2","order":"51","possible_hits":"2",},
{"lineNum":"  144","line":"      # A checksum is generated by taking the first ENT / 32 bits of its SHA256 hash."},
{"lineNum":"  145","line":"      seed_hex = Util.num_to_padded_hex @seed, @ent","class":"lineCov","hits":"1","order":"52","possible_hits":"1",},
{"lineNum":"  146","line":"      checksum_bin = checksum seed_hex","class":"lineCov","hits":"1","order":"56","possible_hits":"1",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"      # This checksum is appended to the end of the initial entropy."},
{"lineNum":"  149","line":"      seed_bin = Util.num_to_padded_bin @seed, @ent","class":"lineCov","hits":"1","order":"57","possible_hits":"1",},
{"lineNum":"  150","line":"      checksummed_seed = seed_bin + checksum_bin","class":"lineCov","hits":"1","order":"58","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"      # Next, these concatenated bits are split into groups of 11 bits,"},
{"lineNum":"  153","line":"      # each encoding a number from 0-2047, serving as an index into a wordlist."},
{"lineNum":"  154","line":"      iterator = 0","class":"lineCov","hits":"1","order":"59","possible_hits":"1",},
{"lineNum":"  155","line":"      split_size = 11","class":"lineCov","hits":"1","order":"60","possible_hits":"1",},
{"lineNum":"  156","line":"      word_indices = [] of Int32","class":"lineCov","hits":"1","order":"61","possible_hits":"1",},
{"lineNum":"  157","line":"      while iterator < checksummed_seed.size","class":"lineCov","hits":"1","order":"62","possible_hits":"1",},
{"lineNum":"  158","line":"        word_indices << checksummed_seed[iterator, split_size].to_i(2)","class":"lineCov","hits":"1","order":"63","possible_hits":"1",},
{"lineNum":"  159","line":"        iterator += split_size","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"      end"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"      # Finally, we convert these numbers into words and use the joined words"},
{"lineNum":"  163","line":"      # as a mnemonic sentence."},
{"lineNum":"  164","line":"      word_list = Util.word_list","class":"lineCov","hits":"1","order":"64","possible_hits":"1",},
{"lineNum":"  165","line":"      phrase = [] of String","class":"lineCov","hits":"1","order":"65","possible_hits":"1",},
{"lineNum":"  166","line":"      word_indices.each do |index|"},
{"lineNum":"  167","line":"        phrase << word_list[index]","class":"lineCov","hits":"1","order":"66","possible_hits":"1",},
{"lineNum":"  168","line":"      end"},
{"lineNum":"  169","line":"      return phrase"},
{"lineNum":"  170","line":"    end"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    # Generates a padded hex string containing the seed of the size of ENT bits."},
{"lineNum":"  173","line":"    #"},
{"lineNum":"  174","line":"    # ```"},
{"lineNum":"  175","line":"    # Bip0039::Mnemonic.new.to_hex"},
{"lineNum":"  176","line":"    # # => \"9e885d952ad362caeb4efe34a8e91bd2\""},
{"lineNum":"  177","line":"    # ```"},
{"lineNum":"  178","line":"    def to_hex : String","class":"lineCov","hits":"2","order":"67","possible_hits":"2",},
{"lineNum":"  179","line":"      return Util.num_to_padded_hex @seed, @ent","class":"lineCov","hits":"1","order":"68","possible_hits":"1",},
{"lineNum":"  180","line":"    end"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    # Extracts the first N SHA256-checksum bits from a given hexadecimal seed."},
{"lineNum":"  183","line":"    #"},
{"lineNum":"  184","line":"    # Parameters:"},
{"lineNum":"  185","line":"    # * `hex` (`String`): the seed to be checksummed."},
{"lineNum":"  186","line":"    private def checksum(hex : String) : String","class":"lineCov","hits":"1","order":"34","possible_hits":"1",},
{"lineNum":"  187","line":"      sha256sum_hex = OpenSSL::Digest.new(\"SHA256\").update(hex.hexbytes).final.hexstring","class":"lineCov","hits":"1","order":"35","possible_hits":"1",},
{"lineNum":"  188","line":"      sha256sum_bin = Util.hex_to_padded_bin sha256sum_hex, 256","class":"lineCov","hits":"1","order":"36","possible_hits":"1",},
{"lineNum":"  189","line":"      checksum_length = (hex.size / 8).to_i","class":"lineCov","hits":"1","order":"41","possible_hits":"1",},
{"lineNum":"  190","line":"      return sha256sum_bin[0, checksum_length]","class":"lineCov","hits":"1","order":"42","possible_hits":"1",},
{"lineNum":"  191","line":"    end"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    # Generates a random seed of ENT bits of entropy."},
{"lineNum":"  194","line":"    #"},
{"lineNum":"  195","line":"    # Parameters:"},
{"lineNum":"  196","line":"    # * `ent` (`Int32`): the bit-size of the random entropy to use (128/160/192/224/256)."},
{"lineNum":"  197","line":"    private def generate_random_seed(ent : Int32) : BigInt","class":"lineCov","hits":"1","order":"45","possible_hits":"1",},
{"lineNum":"  198","line":"      raise \"Invalid entropy provided\" if ent % 32 != 0","class":"lineCov","hits":"1","order":"46","possible_hits":"1",},
{"lineNum":"  199","line":"      seed = Random::Secure.hex (ent / 8).to_i","class":"lineCov","hits":"1","order":"47","possible_hits":"1",},
{"lineNum":"  200","line":"      return BigInt.new seed, 16","class":"lineCov","hits":"1","order":"48","possible_hits":"1",},
{"lineNum":"  201","line":"    end"},
{"lineNum":"  202","line":"  end"},
{"lineNum":"  203","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-10-31 16:36:08", "instrumented" : 54, "covered" : 53,};
var merged_data = [];
