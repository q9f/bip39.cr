var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2021-2022 Afr Schoe"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"module Bip0039"},
{"lineNum":"   16","line":"  class Util"},
{"lineNum":"   17","line":"    # reads the bip-39 english wordlist from file"},
{"lineNum":"   18","line":"    def self.bip0039_word_list : Array(String)","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":"   19","line":"      file_path = Path.new(\"dict\", \"english.txt\")","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"   20","line":"      list_file = File.read(file_path)","class":"lineCov","hits":"1","order":"15","possible_hits":"1",},
{"lineNum":"   21","line":"      word_list = [] of String","class":"lineCov","hits":"1","order":"16","possible_hits":"1",},
{"lineNum":"   22","line":"      list_file.each_line do |word|"},
{"lineNum":"   23","line":"        word_list << word","class":"linePartCov","hits":"2","order":"17","possible_hits":"3",},
{"lineNum":"   24","line":"      end"},
{"lineNum":"   25","line":"      return word_list"},
{"lineNum":"   26","line":"    end"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    # generates a padded binary string from hex with given size"},
{"lineNum":"   29","line":"    def self.hex_to_padded_bin(hex : String, size : Int) : String","class":"lineCov","hits":"1","order":"37","possible_hits":"1",},
{"lineNum":"   30","line":"      num = BigInt.new hex, 16","class":"lineCov","hits":"1","order":"38","possible_hits":"1",},
{"lineNum":"   31","line":"      bin = num.to_s(2)","class":"lineCov","hits":"1","order":"39","possible_hits":"1",},
{"lineNum":"   32","line":"      return bin.rjust size, \'0\'","class":"lineCov","hits":"1","order":"40","possible_hits":"1",},
{"lineNum":"   33","line":"    end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    # generates a padded binary string from a big number with given size"},
{"lineNum":"   36","line":"    def self.num_to_padded_bin(num : BigInt | Int, size : Int) : String","class":"lineCov","hits":"3","order":"22","possible_hits":"3",},
{"lineNum":"   37","line":"      bin = num.to_s(2)","class":"lineCov","hits":"2","order":"23","possible_hits":"2",},
{"lineNum":"   38","line":"      return bin.rjust size, \'0\'","class":"lineCov","hits":"2","order":"24","possible_hits":"2",},
{"lineNum":"   39","line":"    end"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    # generates a padded hex string from a binary string with given size"},
{"lineNum":"   42","line":"    def self.bin_to_padded_hex(bin : String, size : Int) : String","class":"lineCov","hits":"1","order":"30","possible_hits":"1",},
{"lineNum":"   43","line":"      num = BigInt.new bin, 2","class":"lineCov","hits":"1","order":"31","possible_hits":"1",},
{"lineNum":"   44","line":"      hex = num.to_s(16)","class":"lineCov","hits":"1","order":"32","possible_hits":"1",},
{"lineNum":"   45","line":"      return hex.rjust (size / 4).to_i, \'0\'","class":"lineCov","hits":"1","order":"33","possible_hits":"1",},
{"lineNum":"   46","line":"    end"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    # generates a padded hex string from a big number with given size"},
{"lineNum":"   49","line":"    def self.num_to_padded_hex(num : BigInt | Int, size : Int) : String","class":"lineCov","hits":"2","order":"53","possible_hits":"2",},
{"lineNum":"   50","line":"      hex = num.to_s(16)","class":"lineCov","hits":"1","order":"54","possible_hits":"1",},
{"lineNum":"   51","line":"      return hex.rjust (size / 4).to_i, \'0\'","class":"lineCov","hits":"1","order":"55","possible_hits":"1",},
{"lineNum":"   52","line":"    end"},
{"lineNum":"   53","line":"  end"},
{"lineNum":"   54","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-10-31 14:36:10", "instrumented" : 19, "covered" : 19,};
var merged_data = [];
