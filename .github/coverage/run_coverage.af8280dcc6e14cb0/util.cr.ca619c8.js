var data = {lines:[
{"lineNum":"    1","line":"# Copyright 2021-2022 Afr Schoe"},
{"lineNum":"    2","line":"#"},
{"lineNum":"    3","line":"# Licensed under the Apache License, Version 2.0 (the \"License\");"},
{"lineNum":"    4","line":"# you may not use this file except in compliance with the License."},
{"lineNum":"    5","line":"# You may obtain a copy of the License at"},
{"lineNum":"    6","line":"#"},
{"lineNum":"    7","line":"#     http://www.apache.org/licenses/LICENSE-2.0"},
{"lineNum":"    8","line":"#"},
{"lineNum":"    9","line":"# Unless required by applicable law or agreed to in writing, software"},
{"lineNum":"   10","line":"# distributed under the License is distributed on an \"AS IS\" BASIS,"},
{"lineNum":"   11","line":"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},
{"lineNum":"   12","line":"# See the License for the specific language governing permissions and"},
{"lineNum":"   13","line":"# limitations under the License."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"# A collection of utilities for `Bip0039` mnemonic management, e.g.,"},
{"lineNum":"   16","line":"# loading word lists from dictionaries, or n-bit padding operations."},
{"lineNum":"   17","line":"module Bip0039::Util"},
{"lineNum":"   18","line":"  # A generic utility to load the standardized english language word list"},
{"lineNum":"   19","line":"  # from file."},
{"lineNum":"   20","line":"  #"},
{"lineNum":"   21","line":"  # ```"},
{"lineNum":"   22","line":"  # Bip0039::Util.word_list"},
{"lineNum":"   23","line":"  # # => [\"abandon\", \"ability\", \"able\", \"about\", \"above\", ..."},
{"lineNum":"   24","line":"  # ```"},
{"lineNum":"   25","line":"  def self.word_list : Array(String)","class":"lineCov","hits":"1","order":"13","possible_hits":"1",},
{"lineNum":"   26","line":"    file_path = Path.new(\"dict\", \"english.txt\")","class":"lineCov","hits":"1","order":"14","possible_hits":"1",},
{"lineNum":"   27","line":"    list_file = File.read(file_path)","class":"lineCov","hits":"1","order":"15","possible_hits":"1",},
{"lineNum":"   28","line":"    word_list = [] of String","class":"lineCov","hits":"1","order":"16","possible_hits":"1",},
{"lineNum":"   29","line":"    list_file.each_line do |word|"},
{"lineNum":"   30","line":"      word_list << word","class":"linePartCov","hits":"2","order":"17","possible_hits":"3",},
{"lineNum":"   31","line":"    end"},
{"lineNum":"   32","line":"    return word_list"},
{"lineNum":"   33","line":"  end"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"  # A generic utility to generate a padded binary string from a hex string"},
{"lineNum":"   36","line":"  # with given size."},
{"lineNum":"   37","line":"  #"},
{"lineNum":"   38","line":"  # Parameters:"},
{"lineNum":"   39","line":"  # * `hex` (`String`): the hex string to be formatted as padded binary string."},
{"lineNum":"   40","line":"  # * `size` (`Int`): the size in bits for the resulting hex string, e.g., 128."},
{"lineNum":"   41","line":"  #"},
{"lineNum":"   42","line":"  # ```"},
{"lineNum":"   43","line":"  # Bip0039::Util.hex_to_padded_bin \"69\", 32"},
{"lineNum":"   44","line":"  # # => \"00000000000000000000000001101001\""},
{"lineNum":"   45","line":"  # ```"},
{"lineNum":"   46","line":"  def self.hex_to_padded_bin(hex : String, size : Int) : String","class":"lineCov","hits":"1","order":"37","possible_hits":"1",},
{"lineNum":"   47","line":"    num = BigInt.new hex, 16","class":"lineCov","hits":"1","order":"38","possible_hits":"1",},
{"lineNum":"   48","line":"    bin = num.to_s(2)","class":"lineCov","hits":"1","order":"39","possible_hits":"1",},
{"lineNum":"   49","line":"    return bin.rjust size, \'0\'","class":"lineCov","hits":"1","order":"40","possible_hits":"1",},
{"lineNum":"   50","line":"  end"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"  # A generic utility to generate a padded binary string from a big number"},
{"lineNum":"   53","line":"  # with given size."},
{"lineNum":"   54","line":"  #"},
{"lineNum":"   55","line":"  # Parameters:"},
{"lineNum":"   56","line":"  # * `num` (`BigInt | Int`): the number to be formatted as padded binary string."},
{"lineNum":"   57","line":"  # * `size` (`Int`): the size in bits for the resulting hex string, e.g., 128."},
{"lineNum":"   58","line":"  #"},
{"lineNum":"   59","line":"  # ```"},
{"lineNum":"   60","line":"  # Bip0039::Util.num_to_padded_bin 137, 32"},
{"lineNum":"   61","line":"  # # => \"00000000000000000000000010001001\""},
{"lineNum":"   62","line":"  # ```"},
{"lineNum":"   63","line":"  def self.num_to_padded_bin(num : BigInt | Int, size : Int) : String","class":"lineCov","hits":"3","order":"22","possible_hits":"3",},
{"lineNum":"   64","line":"    bin = num.to_s(2)","class":"lineCov","hits":"2","order":"23","possible_hits":"2",},
{"lineNum":"   65","line":"    return bin.rjust size, \'0\'","class":"lineCov","hits":"2","order":"24","possible_hits":"2",},
{"lineNum":"   66","line":"  end"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"  # A generic utility to generate a padded hex string from a binary string"},
{"lineNum":"   69","line":"  # with given size."},
{"lineNum":"   70","line":"  #"},
{"lineNum":"   71","line":"  # Parameters:"},
{"lineNum":"   72","line":"  # * `bin` (`String`): the binary string to be formatted as padded hex string."},
{"lineNum":"   73","line":"  # * `size` (`Int`): the size in bits for the resulting hex string, e.g., 128."},
{"lineNum":"   74","line":"  #"},
{"lineNum":"   75","line":"  # ```"},
{"lineNum":"   76","line":"  # Bip0039::Util.bin_to_padded_hex \"1100101\", 32"},
{"lineNum":"   77","line":"  # # => \"00000065\""},
{"lineNum":"   78","line":"  # ```"},
{"lineNum":"   79","line":"  def self.bin_to_padded_hex(bin : String, size : Int) : String","class":"lineCov","hits":"1","order":"30","possible_hits":"1",},
{"lineNum":"   80","line":"    num = BigInt.new bin, 2","class":"lineCov","hits":"1","order":"31","possible_hits":"1",},
{"lineNum":"   81","line":"    hex = num.to_s(16)","class":"lineCov","hits":"1","order":"32","possible_hits":"1",},
{"lineNum":"   82","line":"    return hex.rjust (size / 4).to_i, \'0\'","class":"lineCov","hits":"1","order":"33","possible_hits":"1",},
{"lineNum":"   83","line":"  end"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  # A generic utility to generate a padded hex string from a big number"},
{"lineNum":"   86","line":"  # with given size."},
{"lineNum":"   87","line":"  #"},
{"lineNum":"   88","line":"  # Parameters:"},
{"lineNum":"   89","line":"  # * `num` (`BigInt | Int`): the number to be formatted as padded hex string."},
{"lineNum":"   90","line":"  # * `size` (`Int`): the size in bits for the resulting hex string, e.g., 128."},
{"lineNum":"   91","line":"  #"},
{"lineNum":"   92","line":"  # ```"},
{"lineNum":"   93","line":"  # Bip0039::Util.num_to_padded_hex 137, 32"},
{"lineNum":"   94","line":"  # # => \"00000089\""},
{"lineNum":"   95","line":"  # ```"},
{"lineNum":"   96","line":"  def self.num_to_padded_hex(num : BigInt | Int, size : Int) : String","class":"lineCov","hits":"3","order":"53","possible_hits":"3",},
{"lineNum":"   97","line":"    hex = num.to_s(16)","class":"lineCov","hits":"2","order":"54","possible_hits":"2",},
{"lineNum":"   98","line":"    return hex.rjust (size / 4).to_i, \'0\'","class":"lineCov","hits":"2","order":"55","possible_hits":"2",},
{"lineNum":"   99","line":"  end"},
{"lineNum":"  100","line":"end"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "run_coverage", "date" : "2021-10-31 16:36:08", "instrumented" : 19, "covered" : 19,};
var merged_data = [];
